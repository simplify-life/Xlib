//----------------------------------------------//
//  xallocator.tcpp
//  xlib
//
//  Copyright (c) __DATA__  Ximena.
//  Created by ximena on 16/6/21.
//    Copyright © 2016年 ximena. All rights reserved.
//  Contact Email: xiaominghe2014@gmail.com
//----------------------------------------------//

#ifndef allocator_tcpp
#define allocator_tcpp


template <class T, size_t BlockSize>
typename XAllocator<T, BlockSize>::size_type
XAllocator<T, BlockSize>::padPointer(data_pointer_ p, size_type align) const noexcept
{
    std::uintptr_t result = reinterpret_cast<std::uintptr_t>(p);
    return ((align - result) % align);
}



template <class T, size_t BlockSize>
XAllocator<T, BlockSize>::XAllocator() noexcept
{
    currentBlock_ = nullptr;
    currentSlot_ = nullptr;
    lastSlot_ = nullptr;
    freeSlots_ = nullptr;
}



template <class T, size_t BlockSize>
XAllocator<T, BlockSize>::XAllocator(const XAllocator& allocator)noexcept :XAllocator(/*allocator*/)
{}



template <class T, size_t BlockSize>
XAllocator<T, BlockSize>::XAllocator(XAllocator&& allocator)noexcept
{
    currentBlock_ = allocator.currentBlock_;
    allocator.currentBlock_ = nullptr;
    currentSlot_ = allocator.currentSlot_;
    lastSlot_ = allocator.lastSlot_;
    freeSlots_ = allocator.freeSlots;
}


template <class T, size_t BlockSize>
template<class U>
XAllocator<T, BlockSize>::XAllocator(const XAllocator<U>& allocator)noexcept :XAllocator()
{}



template <class T, size_t BlockSize>
XAllocator<T, BlockSize>&
XAllocator<T, BlockSize>::operator=(XAllocator&& allocator) noexcept
{
    if (this != &allocator)
    {
        std::swap(currentBlock_, allocator.currentBlock_);
        currentSlot_ = allocator.currentSlot_;
        lastSlot_ = allocator.lastSlot_;
        freeSlots_ = allocator.freeSlots;
    }
    return *this;
}



template <class T, size_t BlockSize>
XAllocator<T, BlockSize>::~XAllocator() noexcept
{
    slot_pointer_ curr = currentBlock_;
    while (curr != nullptr) {
        slot_pointer_ prev = curr->next;
        operator delete(reinterpret_cast<void*>(curr));
        curr = prev;
    }
}



template <class T, size_t BlockSize>
typename XAllocator<T, BlockSize>::pointer
XAllocator<T, BlockSize>::address(reference x) const noexcept
{
    return &x;
}



template <class T, size_t BlockSize>
typename XAllocator<T, BlockSize>::const_pointer
XAllocator<T, BlockSize>::address(const_reference x) const noexcept
{
    return &x;
}



template <class T, size_t BlockSize>
void XAllocator<T, BlockSize>::allocateBlock()
{
    // Allocate space for the new block and store a pointer to the previous one
    data_pointer_ newBlock = reinterpret_cast<data_pointer_>
    (operator new(BlockSize));
    reinterpret_cast<slot_pointer_>(newBlock)->next = currentBlock_;
    currentBlock_ = reinterpret_cast<slot_pointer_>(newBlock);
    // Pad block body to staisfy the alignment requirements for elements
    data_pointer_ body = newBlock + sizeof(slot_pointer_);
    size_type bodyPadding = padPointer(body, alignof(slot_type_));
    currentSlot_ = reinterpret_cast<slot_pointer_>(body + bodyPadding);
    lastSlot_ = reinterpret_cast<slot_pointer_>
    (newBlock + BlockSize - sizeof(slot_type_) + 1);
}



template <class T, size_t BlockSize>
typename XAllocator<T, BlockSize>::pointer
XAllocator<T, BlockSize>::allocate(size_type n, const_pointer hint)
{
    if (freeSlots_ != nullptr) {
        pointer result = reinterpret_cast<pointer>(freeSlots_);
        freeSlots_ = freeSlots_->next;
        return result;
    }
    else {
        if (currentSlot_ >= lastSlot_)
            allocateBlock();
        return reinterpret_cast<pointer>(currentSlot_++);
    }
}



template <typename T, size_t BlockSize>
void XAllocator<T, BlockSize>::deallocate(pointer p, size_type n)
{
    if (p != nullptr) {
        reinterpret_cast<slot_pointer_>(p)->next = freeSlots_;
        freeSlots_ = reinterpret_cast<slot_pointer_>(p);
    }
}



template <typename T, size_t BlockSize>
typename XAllocator<T, BlockSize>::size_type
XAllocator<T, BlockSize>::max_size() const noexcept
{
    size_type maxBlocks = -1 / BlockSize;
    return (BlockSize - sizeof(data_pointer_)) / sizeof(slot_type_) * maxBlocks;
}



template <class T, size_t BlockSize>
template <class U, class... Args>
void XAllocator<T, BlockSize>::construct(U* p, Args&&... args)
{
    new (p) U (std::forward<Args>(args)...);
}



template <class T, size_t BlockSize>
template <class U>
void XAllocator<T, BlockSize>::destroy(U* p)
{
    p->~U();
}



template <class T, size_t BlockSize>
template <class... Args>
typename XAllocator<T, BlockSize>::pointer
XAllocator<T, BlockSize>::newElement(Args&&... args)
{
    pointer result = allocate();
    construct<value_type>(result, std::forward<Args>(args)...);
    return result;
}



template <class T, size_t BlockSize>
void XAllocator<T, BlockSize>::deleteElement(pointer p)
{
    if (p != nullptr) {
        p->~value_type();
        deallocate(p);
    }
}

#endif

